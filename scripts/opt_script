#!/usr/bin/env python

#Used for instrumenting coreutils with recfi policies:
#"two", "merge", or "list".
#
#Looks for .bc files in a given directory and instruments
#each with the given ReCFI policy. Generates a log file
#with useful statistics for each .bc file.

import os
import sys
import subprocess
import fileinput


def usage():
    use = "\n\tUsage: opt_script <dir> <cfi policy> <recfi root dir>\n\
\tdir - directory containing llvm bitcode files to harden\n\
\tcfi policy - name of cfi policy to run: two, merge, list\n\
\trecfi root dir - root directory for recfi\n"
    print(use)

def main():
    if len(sys.argv) < 4:
        usage()
        sys.exit(1)

    dir = sys.argv[1]
    opt_pass = sys.argv[2]
    root_dir = sys.argv[3]

    os.chdir(dir)
    bcfiles = []
    for file in os.listdir("./"):
        if file.endswith(".bc") and "_opt" not in file and ".so" not in file:
            #skip files that aren't assembling due to unknown issues
	    #if not ("timeout.bc" in file or "sort.bc" in file):
            bcfiles.append(os.path.abspath(file))

    dsalib = root_dir + "/build/projects/poolalloc/Release+Debug+Asserts/lib/LLVMDataStructure.so"
    cfipasslib = root_dir + "/cfi-analysis/build/Release+Debug+Asserts/lib/CfiPasses.so"
    cfiutillib = root_dir + "/cfi-analysis/build/Release+Debug+Asserts/lib/CfiUtil.so"
    cfiwrapperlib = root_dir + "/cfi-analysis/build/Release+Debug+Asserts/lib/LLVMWrapper.so"
    cfilib = root_dir + "/cfi-analysis/build/Release+Debug+Asserts/lib/LLVMcfi.so"
    pyscript = root_dir + "/cfi-lowering/CFIAsmEditor.py"

    for file in bcfiles:
        print("running pass on " + file)
        disass = file.replace(".bc", ".ll")
        opt_file = file.replace(".bc", "_opt.bc")
	log_file = file.replace(".bc", ".log")
        
        #disassemble .bc file, then change triple 
        #from arm to x86_64, then reassemble the file
        subprocess.check_call(["llvm-dis", file])
        for line in fileinput.input(disass, inplace=True):
            if "target triple" in line:
                line = "target triple = \"x86_64--linux-gnueabi\"\n"
                sys.stdout.write(line) 
            else:
                sys.stdout.write(line)
        fileinput.close()
        subprocess.check_call(["llvm-as", disass, "-o", file])

        #run opt pass on .bc files
        subprocess.check_call(["opt", 
	    "-load", dsalib, 
            "-load", cfipasslib,
	    "-load", cfiutillib,
	    "-load", cfilib,
      "-load", cfiwrapperlib,
      "-cfi-wrapper",
	    "-cfi",
            "-" + opt_pass, 
	    "-cfi-stats",
	    "-cso", log_file,
            file, "-o", opt_file])
        subprocess.check_call(["llvm-dis", opt_file]) 

        #generate assembly and replace llvm intrinsic with 
        #actual asm instructions
        asm_file = file.replace(".bc", ".s")
        asm_fixed = asm_file.replace(".s", "_fixed.s")
        binary = file.replace(".bc", "")        

        subprocess.check_call(["llc", "-O0", "-mtriple", "armv7a-linux-gnueabi", opt_file, "-o", asm_file])
        subprocess.check_call(["python", pyscript, "-f", asm_file, "-o", asm_fixed])
        subprocess.check_call(["arm-linux-gnueabi-gcc", "-g", "-static", asm_fixed, "-lrt", "-lpthread", "-o", binary])
        subprocess.check_call(["chmod", "+x", binary])

if __name__ == "__main__":
    main()
